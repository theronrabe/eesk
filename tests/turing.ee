#Test turing completeness of right-regular Eesk
#
#Grammar for right-regular Eesk followed in this file:
	# S -> rep S | Abs S | enc S | eval S | ')' | ']' | '}' | {}
	# rep -> *('0'-'9')
	# Abs -> op | sym
	# op -> '+' | '-' | 'given' | '$' | '...' | etc.
	# sym -> *('a'-'z'|'A'-'Z' *('0'-'9'))
	# enc -> '`'
	# eval -> '['

{
	`{
		given now:
			true$
			false$
			now$ - condition$! * 8;$; => given eval;
		... now$;
		eval$ []
	 } => decide;

	`{
		given recurse = this;
		=> given instructions;
		=> given condition;
		condition$ [] => given decision;

			`{instructions$ [] condition$ instructions$ recurse$ []}
			`{}
			decision$ 
		decide$ []
	} => repeat;

	given i ^
		`{i$ < 10; i = i$+1}
		`{i$}
	repeat$ []

		`{i = i$ - 1; i$ > 4}
		`{printd i$}
	repeat$ []

		`{prints 1}
		`{ `{i$ < 10; i=i$+1} `{printd 0} repeat$ [] }
		10 > 11;
	decide$ []
}
