#This program maintains a list-based stack
{
	public Set listStack {} {
		private Set node {} {
			public value
			public value2
			public prev
		} ^

		private tail ^

		public Set push {X, Y} {
			next = new node;
			next->node.value = X$;
			next->node.value2 = Y$;
			next->node.prev = tail$;
			tail = next$;
		} ^

		public Set pop {} {
			tail->node.value$
			printd tail->node.value2$;
			temp = tail->node.prev$;
			free tail$;
			tail = temp$;
		} ^
	}
Begin
	listStack.push [7, 1]
	listStack.push [8, 2]
	listStack.push [9, 3]

	listStack.pop []
	listStack.pop []
	listStack.pop []
End
}
