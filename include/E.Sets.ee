#This library contains Set-oriented functions
{
	public Set Sets {} {
		public Set count {S, retain} {
			given beginning:
				S$ []
				given end:

			given ret = (beginning$ - end$;/8);

			if {retain$} {} {
				... beginning$;
			}
			ret$
		} ^

		public Set foreach {S, OP} {
			given moment0:
				S$ []
				while {given now: now$ < moment0$} {
					OP$ []
				}
			... moment0$;
		} ^

		public Set pipeline {S, OP} {
			given beginning:
				S$ []
				given end:
					given i = 0;
					while {i$ < beginning$ - end$; i=i$+8} {
						beginning$ - i$;$
					}
					while {given now: now$ < end$} {
						OP$ []
					}
			... beginning$;
		} ^

		public Set exists {S, element} {
			given capture:
				S$ []
				while {given now: now$ < capture$} {
					if { == element$} {
						... capture$;
						return 1
					} {}
				}
			... capture$;
			0
		} ^

		public Set union {S1, S2} {
			given capture:
				S1$ []
				S2$ []
				while {given now: now$ < capture$} { , }
			... capture$;
			create
		} ^

		public Set intersection {S1, S2} {
			given eval1:
				S1$ []
			given eval2:
				S2$ []

			given intersect:
				given i=0;
				while {eval2$ - i$ > intersect$} {
					eval2$ - i$;$ => given elem;
					Set match {} {
						given i = 0;
						while {eval1$ - i$ > eval2$} {
							if {eval1$ - i$;$ == elem$} {
								return elem$
							} {}
							i = i$ + 8;
						}
					} []
					i = i$ + 8;
				}

				while {given now: now$ < intersect$} {
					,
				}

			... eval1$;
			create
		} ^
	}
}
